<?php

/**
 * @file
 * Contains Drupal\koba_booking\koba_booking.module
 */

/**
 * @defgroup koba_booking
 * @{
 * Implement a Content entity.
 *
 * }
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\file\Entity\File;
use Drupal\Core\Config;
use Drupal\Core\Entity\EntityManagerInterface;
use Drupal\Core\StringTranslation\TranslationInterface;
use Drupal\Core\Asset\AttachedAssetsInterface;


/**
 * Implements hook_theme().
 */
function koba_booking_theme($existing, $type, $theme, $path) {
  return array(
    'booking_calendar_page' => array(
      'variables' => array(),
      'file' => 'koba_booking.pages.inc',
    ),
    'booking_receipt' => array(
      'variables' => array(
        'booking' => NULL,
      ),
      'file' => 'koba_booking.pages.inc',
    ),
    'booking_add_booking' => array(
      'render element' => 'form',
      'file' => 'koba_booking.pages.inc',
    ),
    // Request mail.
    'booking_mail_request' => array(
      'template' => 'booking-mail-request',
      'variables' => array(
        'logo_url' => '',
        'message' => 'Booking request',
        'booking' => array(
          'id' => '',
          'title' => '',
          'date' => '',
          'time' => '',
          'room' => array(
            'title' => '',
            'price' => 0,
            'url' => '',
          ),
          'name' => '',
          'mail' => '',
          'phone' => '',
          'type' => '',
          'message' => '',
          'url' => '',
        ),
      ),
    ),
    // Accepted mail.
    'booking_mail_accepted' => array(
      'template' => 'booking-mail-accepted',
      'variables' => array(
        'logo_url' => '',
        'message' => 'Booking accepted',
        'booking' => array(
          'id' => '',
          'title' => '',
          'date' => '',
          'time' => '',
          'room' => array(
            'title' => '',
            'price' => 0,
            'url' => '',
          ),
          'name' => '',
          'mail' => '',
          'phone' => '',
          'type' => '',
          'message' => '',
          'url' => '',
        ),
      ),
    ),
    // Rejected mail.
    'booking_mail_rejected' => array(
      'template' => 'booking-mail-rejected',
      'variables' => array(
        'logo_url' => '',
        'message' => 'Booking rejected',
        'booking' => array(
          'id' => '',
          'title' => '',
          'date' => '',
          'time' => '',
          'room' => array(
            'title' => '',
            'price' => 0,
            'url' => '',
          ),
          'name' => '',
          'mail' => '',
          'phone' => '',
          'type' => '',
          'message' => '',
          'url' => '',
        ),
      ),
    ),
    // Cancelled mail.
    'booking_mail_cancelled' => array(
      'template' => 'booking-mail-cancelled',
      'variables' => array(
        'logo_url' => '',
        'message' => 'Booking cancelled',
        'booking' => array(
          'id' => '',
          'title' => '',
          'date' => '',
          'time' => '',
          'room' => array(
            'title' => '',
            'price' => 0,
            'url' => '',
          ),
          'name' => '',
          'mail' => '',
          'phone' => '',
          'type' => '',
          'message' => '',
          'url' => '',
        ),
      ),
    ),
  );
}

/**
 * Implements hook_wayf_dk_login_create_user().
 *
 * Store information in session and redirect to logout.
 */
function koba_booking_wayf_dk_login_create_user($attributes) {
  // Get data stored in session.
  $data = \Drupal::service('session')->get('koba_booking_request');

  // The mail attribute changes its status from MUST into MAY as of May 2013 - WAYF.
  if (!empty($attributes['urn:oid:0.9.2342.19200300.100.1.3'])) {
    $data['mail'] = array_pop($attributes['urn:oid:0.9.2342.19200300.100.1.3']);
  }

  // Get name.
  $data['name'] = $attributes['urn:oid:2.5.4.3'][0];
  if (!empty($attributes['urn:oid:2.5.4.42'][0])) {
    $data['name'] = $attributes['urn:oid:2.5.4.42'][0] . ' ' . $attributes['urn:oid:2.5.4.4'][0];
  }

  // Get unique wayf ID.
  $data['uuid'] = array_pop($attributes['urn:oid:1.3.6.1.4.1.5923.1.1.1.10']);

  // Store the data in the session.
  \Drupal::service('session')->set('koba_booking_request', $data);
}


/**
 * Translate list item machine name for booking usage list field.
 *
 * Display the name rather than machine name.
 *
 * @todo get the list item title in a proper way.
 *
 * @return array
 *   An array of list item titles.
 */
function koba_booking_room_usage() {
  return array(
    'lecture' => t('Lecture'),
    'theater' => t('Theater'),
    'debate' => t('Debate'),
    'project_meeting' => t('Project meeting'),
    'screening' => t('Film screening'),
    'it_intro' => t('IT-Introduction'),
    'other' => t('Other (Use message field)'),
  );
}

/**
 * Implements hook_js_alter().
 *
 * Search the angular application for drupal translations.
 */
function koba_booking_js_alter(&$javascript, AttachedAssetsInterface $assets) {
  $files = array();
  $path = \Drupal::moduleHandler()->getModule('koba_booking')->getPath();

  // Files to scan for translations (js and templates).
  $extensions = Array ( 'js', 'html' );

  // Find the files.
  $it = new RecursiveDirectoryIterator(__DIR__ . '/js/app');
  foreach(new RecursiveIteratorIterator($it) as $file)  {
    $ext = pathinfo($file, PATHINFO_EXTENSION);
    if (in_array($ext, $extensions)) {
      $files[] = $path . str_replace(__DIR__, '', $file);
    }
  }

  // Scan the files to get translations into the database.
  locale_js_translate($files);
}

/**
 * Implements hook_preprocess_views_view_table().
 *
 * Attaches a class to conflicting bookings in the view and load css.
 */
function koba_booking_preprocess_views_view_table(&$vars) {
  // @TODO: Find better way to identify this particular view.
  if ($vars['view']->storage->id() !== 'bookings') {
    return;
  }

  // Load css library.
  $vars['view']->element['#attached']['library'][] = 'koba_booking/administration_booking_view_style';

  // Look through each result for a conflict.
  foreach ($vars['result'] as $result) {
    // Get current booking info.
    $booking_from_date = (int) $result->booking_booking_from_date;
    $booking_to_date = (int) $result->booking_booking_to_date;
    $booking_id = (int) $result->id;
    $booking_index = $result->index;

    // Get conflicting bookings.
    $query = \Drupal::entityQuery('koba_booking_booking')
      ->condition('id', $booking_id, '<>')
      ->condition('booking_from_date', $booking_to_date, '<')
      ->condition('booking_to_date', $booking_from_date, '>');

    // Only consider request, accepted, pending bookings.
    $onlyActiveGroup = $query->orConditionGroup()
      ->condition('booking_status', 'accepted', 'STARTS_WITH')
      ->condition('booking_status', 'request', 'STARTS_WITH')
      ->condition('booking_status', 'pending', 'STARTS_WITH');
    $query->condition($onlyActiveGroup);

    // Execute query to get possible conflicts.
    $conflicts = $query->execute();

    // If there are any conflicts.
    if (count($conflicts) > 0) {
      // Attach the class to indicate a conflict.
      $vars['rows'][$booking_index]['attributes']['class'] = 'koba--booking-is-conflict ' . $vars['rows'][$booking_index]['attributes']['class'];
    }
  }
}