<?php

/**
 * @file
 * Contains Drupal\koba_booking\koba_booking.module
 */

/**
 * @defgroup koba_booking
 * @{
 * Implement a Content entity.
 *
 * }
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\file\Entity\File;
use Drupal\Core\Config;
use Drupal\Core\Entity\EntityManagerInterface;
use Drupal\Core\StringTranslation\TranslationInterface;


/**
 * Implements hook_theme().
 */
function koba_booking_theme($existing, $type, $theme, $path) {
  return array(
    'booking_calendar_page' => array(
      'variables' => array(),
      'file' => 'koba_booking.pages.inc',
    ),
    'booking_receipt' => array(
      'variables' => array(
        'booking' => NULL,
      ),
      'file' => 'koba_booking.pages.inc',
    ),
    'booking_add_booking' => array(
      'render element' => 'form',
      'file' => 'koba_booking.pages.inc',
    ),
    // Request mail.
    'booking_mail_request' => array(
      'template' => 'booking-mail-request',
      'variables' => array(
        'message' => 'Booking request',
        'booking' => array(
          'id' => '',
          'title' => '',
          'date' => '',
          'time' => '',
          'room' => array(
            'title' => '',
            'price' => 0,
            'url' => '',
          ),
          'name' => '',
          'mail' => '',
          'phone' => '',
          'type' => '',
          'message' => '',
          'url' => '',
        ),
      ),
    ),
    // Accepted mail.
    'booking_mail_accepted' => array(
      'template' => 'booking-mail-accepted',
      'variables' => array(
        'message' => 'Booking accepted',
        'booking' => array(
          'id' => '',
          'title' => '',
          'date' => '',
          'time' => '',
          'room' => array(
            'title' => '',
            'price' => 0,
            'url' => '',
          ),
          'name' => '',
          'mail' => '',
          'phone' => '',
          'type' => '',
          'message' => '',
          'url' => '',
        ),
      ),
    ),
    // Rejected mail.
    'booking_mail_rejected' => array(
      'template' => 'booking-mail-rejected',
      'variables' => array(
        'message' => 'Booking rejected',
        'booking' => array(
          'id' => '',
          'title' => '',
          'date' => '',
          'time' => '',
          'room' => array(
            'title' => '',
            'price' => 0,
            'url' => '',
          ),
          'name' => '',
          'mail' => '',
          'phone' => '',
          'type' => '',
          'message' => '',
          'url' => '',
        ),
      ),
    ),
    // Cancelled mail.
    'booking_mail_cancelled' => array(
      'template' => 'booking-mail-cancelled',
      'variables' => array(
        'message' => 'Booking cancelled',
        'booking' => array(
          'id' => '',
          'title' => '',
          'date' => '',
          'time' => '',
          'room' => array(
            'title' => '',
            'price' => 0,
            'url' => '',
          ),
          'name' => '',
          'mail' => '',
          'phone' => '',
          'type' => '',
          'message' => '',
          'url' => '',
        ),
      ),
    ),
  );
}


/**
 * Helper function to send mail based on a booking.
 *
 * @param string $type
 *   The type of the mail (request, accpeted, etc.)
 * @param \Drupal\koba_booking\BookingInterface $booking
 *   Booking object that this mail is about.
 */
function koba_booking_send_mail($type, \Drupal\koba_booking\BookingInterface $booking = NULL) {
  // Get to mail address.
  $to = array_pop($booking->booking_email->getValue())['value'];

  // Try to get and from address from the site configuration.
  $site_config = \Drupal::config('system.site');
  $from = $site_config->get('mail');
  if (empty($from)) {
    $from = ini_get('sendmail_from');
  }

  // Build render array for the mail body.
  $subject = 'Unknown mail type';
  $content = array();
  $config = \Drupal::config('koba_booking.settings');
  switch ($type) {
    case 'request':
      $subject = $config->get('koba_email.email_pending_title');

      // Build render array.
      $content = array(
        '#theme' => 'booking_mail_request',
        '#message' => $config->get('koba_email.email_pending_body'),
      );
      break;

    case 'accepted':
      $subject = $config->get('koba_email.accepted_email_title');

      // Build render array.
      $content = array(
        '#theme' => 'booking_mail_accepted',
        '#message' => $config->get('koba_email.accepted_email_body'),
      );
      break;

    case 'rejected':
      $subject = $config->get('koba_email.rejected_email_title');

      // Build render array.
      $content = array(
        '#theme' => 'booking_mail_accepted',
        '#message' => $config->get('koba_email.rejected_email_body'),
      );
      break;

    case 'cancelled':
      $subject = $config->get('koba_email.cancelled_email_title');

      // Build render array.
      $content = array(
        '#theme' => 'booking_mail_accepted',
        '#message' => $config->get('koba_email.cancelled_email_body'),
      );
      break;
  }

  // Extend content with booking information.
  if (!is_null($booking)) {
    $content += _koba_booking_generate_booking_array($booking);
  }

  // Render the body content for the mail.
  $body = render($content);

  // Send the mail.
  _koba_booking_mailer($to, $from, $subject, $body);
}


/**
 * Build render array with booking information.
 *
 * @param \Drupal\koba_booking\BookingInterface $booking
 *   Booking object to generate array for.
 *
 * @return array
 *   Array with booking information.
 */
function _koba_booking_generate_booking_array(\Drupal\koba_booking\BookingInterface $booking) {
  // Load room for the booking.
  $room = entity_load('node', array_pop($booking->booking_resource->getValue())['target_id']);

  $generator = \Drupal::urlGenerator();
  $url = $generator->generateFromRoute('koba_booking.receipt', array(
    'hash' => array_pop($booking->booking_hash->getValue())['value'],
  ), array(
    'absolute' => TRUE,
  ));

  return array(
    '#booking' => array(
      'id' => array_pop($booking->id->getValue())['value'],
      'title' => \Drupal\Component\Utility\SafeMarkup::checkPlain(array_pop($booking->name->getValue())['value']),
      'date' => format_date(array_pop($booking->booking_from_date->getValue())['value'], 'dokk1_booking_dato'),
      'time' => format_date(array_pop($booking->booking_from_date->getValue())['value'], 'dokk1_booking_time') . ' - ' . format_date(array_pop($booking->booking_to_date->getValue())['value'], 'dokk1_booking_time'),
      'room' => array(
        'title' => array_pop($room->title->getValue())['value'],
        'price' => array_pop($room->field_price->getValue())['value'],
        'url' => $room->url(),
      ),
      'name' => \Drupal\Component\Utility\SafeMarkup::checkPlain(array_pop($booking->booking_name->getValue())['value']),
      'mail' => \Drupal\Component\Utility\SafeMarkup::checkPlain(array_pop($booking->booking_email->getValue())['value']),
      'phone' => \Drupal\Component\Utility\SafeMarkup::checkPlain(array_pop($booking->booking_phone->getValue())['value']),
      'type' => \Drupal\Component\Utility\SafeMarkup::checkPlain(array_pop($booking->booking_usage->getValue())['value']),
      'message' => \Drupal\Component\Utility\SafeMarkup::checkPlain(array_pop($booking->booking_message->getValue())['value']),
      'url' => $url,
    ),
  );
}


/**
 * Send HTML mails.
 *
 * @TODO: This is not the Drupal way to send mail, but rather a hack to send
 *        HTML mails. Drupal MailManger service hardcode plain/text as content
 *        type, so HTML is not supported.
 *
 *        When the SwiftMailer module have been ported to D8... USE IT.
 *
 * @param $to
 *   Mail address to send mail to.
 * @param $from
 *   The sender of the mail.
 * @param $subject
 *   The mails subject.
 * @param $body
 *   The HTML body content to send.
 * @param string $name
 *   The name of the sender. Defaults to 'Dokk1'.
 */
function _koba_booking_mailer($to, $from, $subject, $body, $name = 'Dokk1') {
  // Get hold of the RAW mailer client.
  $key = \Drupal\Component\Utility\Crypt::randomBytesBase64();
  $mailer = \Drupal::service('plugin.manager.mail')->getInstance(array('module' => 'koba_bookinf', 'key' => $key));

  // Build mail configuration and set the type to HTML.
  $params = array(
    'headers' => array(
      'MIME-Version' => '1.0',
      'Content-Type' => 'text/html; charset=UTF-8; format=flowed; delsp=yes',
      'Content-Transfer-Encoding' => '8Bit',
      'X-Mailer' => 'Drupal',
      'Return-Path' => $from,
      'Replay-to' => $from,
      'Sender' => $from,
      'From' => $name . ' <' . $from . '>',
    ),
    'to' => $to,
    'body' => $body,
    'subject' => $subject,
  );

  // Send the mail.
  $mailer->mail($params);
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function koba_booking_form_koba_booking_booking_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Switch between add or edit action.
  if ($form['#action'] == '/booking/add') {

    // Fetch module config settings.
    $config = \Drupal::config('koba_booking.settings');

    // Fetch header top file.
    $top_image_id = $config->get('koba_booking.create_booking_top_image');
    $file = ($top_image_id) ? File::load($top_image_id) : FALSE;

    // @todo caching af image.
    // Set variables
    $form['variables']['title'] = $config->get('koba_booking.create_booking_title');
    $form['variables']['top_img'] = ($file) ? $file->url() : '';
    $form['variables']['search_phase'] = $config->get('koba_booking.search_phase');

    // Change field descriptions.
    $form['booking_email']['widget']['0']['value']['#description'] = '<div class="booking--description-link" data-ng-click="showEmailDescription = !showEmailDescription">' . t('Why do we need your email?') . '</div>';
    $form['name']['widget']['0']['value']['#description'] = '<div class="booking--description-link" data-ng-click="showTitleDescription = !showTitleDescription">' . t('Why do we need a title?') . '</div>';
    $form['booking_name']['widget']['0']['value']['#attributes']['readonly'] = 'readonly';
    $form['booking_name']['widget']['0']['value']['#attributes']['class'][] = 'booking--readonly';
    $form['booking_email']['widget']['0']['value']['#attributes']['readonly'] = 'readonly';
    $form['booking_email']['widget']['0']['value']['#attributes']['class'][] = 'booking--readonly';

    // Filter help texts if they have a filter.
    $form['variables']['why_email'] = is_array($config->get('koba_booking.why_email')) ? check_markup($config->get('koba_booking.why_email')['value'], 'editor_format') : check_markup($config->get('koba_booking.why_email'), 'editor_format');
    $form['variables']['why_title'] = is_array($config->get('koba_booking.why_title')) ? check_markup($config->get('koba_booking.why_title')['value'], 'editor_format') : check_markup($config->get('koba_booking.why_title'), 'editor_format');

    // Help texts are reused as headers.
    $form['variables']['why_email_header'] = t('Why do we need your email?');
    $form['variables']['why_title_header'] = t('Why do we need a title?');

    // Add template as prefix.
    $form['#theme'] = array('booking_add_booking');
  }
}


/**
 * Implements hook_wayf_dk_login_create_user().
 *
 * Store information in session and redirect to logout.
 */
function koba_booking_wayf_dk_login_create_user($attributes) {
  // Get data stored in session.
  $data = \Drupal::service('session')->get('koba_booking_request');

  // The mail attribute changes its status from MUST into MAY as of May 2013 - WAYF.
  if (!empty($attributes['urn:oid:0.9.2342.19200300.100.1.3'])) {
    $data['mail'] = array_pop($attributes['urn:oid:0.9.2342.19200300.100.1.3']);
  }

  // Get name.
  $data['name'] = array(
    'first' => array_pop($attributes['gn']),
    'last' => array_pop($attributes['sn']),
  );

  // Get unique wayf ID.
  $data['uuid'] = array_pop($attributes['urn:oid:1.3.6.1.4.1.5923.1.1.1.10']);

  // Store the data in the session.
  \Drupal::service('session')->set('koba_booking_request', $data);
}


/**
 * Translate list item machine name for booking usage list field.
 *
 * Display the name rather than machine name.
 *
 * @todo get the list item title in a proper way.
 *
 * @return array
 *   An array of list item titles.
 */
function koba_booking_room_usage() {
  return array(
    'lecture' => t('Lecture'),
    'theater' => t('Theater'),
    'debate' => t('Debate'),
    'project_meeting' => t('Project meeting'),
    'screening' => t('Screening'),
    'it_intro' => t('IT-Introduction'),
    'other' => t('Other (Use message field)'),
  );
}