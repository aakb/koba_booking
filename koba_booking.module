<?php

/**
 * @file
 * Contains Drupal\koba_booking\koba_booking.module
 */

/**
 * @defgroup koba_booking
 * @{
 * Implement a Content entity.
 *
 * }
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\file\Entity\File;
use Drupal\Core\Config;
use Drupal\Core\Entity\EntityManagerInterface;
use Drupal\Core\StringTranslation\TranslationInterface;


/**
 * Implements hook_theme().
 */
function koba_booking_theme($existing, $type, $theme, $path) {
  return array(
    'booking_calendar_page' => array(
      'variables' => array(),
      'file' => 'koba_booking.pages.inc',
    ),
    'booking_receipt' => array(
      'variables' => array(
        'booking' => NULL,
      ),
      'file' => 'koba_booking.pages.inc',
    ),
    'booking_add_booking' => array(
      'render element' => 'form',
      'file' => 'koba_booking.pages.inc',
    ),
    'booking_mail_request' => array(
      'template' => 'booking-mail-request',
      'variables' => array(

      ),
    ),
  );
}

/**
 * Send HTML mails.
 *
 * @TODO: This is not the Drupal way to send mail, but rather a hack to send
 *        HTML mails. Drupal MailManger service hardcode plain/text as content
 *        type, so HTML is not supported.
 *
 *        When the SwiftMailer module have been ported to D8... USE IT.
 *
 * @param string $type
 *   The type of mail to send (requst, accepted, etc).
 * @param string $to
 *   The to mail address.
 * @param string $subject
 *   The mails subject.
 * @param \Drupal\koba_booking\BookingInterface $booking
 *   The booking this mail is about.
 */
function koba_booking_send_mail($type, $to, $subject, \Drupal\koba_booking\BookingInterface $booking) {
  // Get hold of the RAW mailer client.
  $key = \Drupal\Component\Utility\Crypt::randomBytesBase64();
  $mailer = \Drupal::service('plugin.manager.mail')->getInstance(array('module' => 'koba_bookinf', 'key' => $key));

  // Try to get and from address from the site configuration.
  $site_config =\Drupal::config('system.site');
  $site_mail = $site_config->get('mail');
  if (empty($site_mail)) {
    $site_mail = ini_get('sendmail_from');
  }

  // Build render array for the mail body.
  $theme = array(
    '#theme' => 'booking_mail_' . $type,
  );
  $body = render($theme);

  // Build mail configuration and set the type to HTML.
  $params = array(
    'headers' => array(
      'MIME-Version' => '1.0',
      'Content-Type' => 'text/html; charset=UTF-8; format=flowed; delsp=yes',
      'Content-Transfer-Encoding' => '8Bit',
      'X-Mailer' => 'Drupal',
      'Return-Path' => $site_mail,
      'Replay-to' => $site_mail,
      'Sender' => $site_mail,
      'From' => $site_config->get('name') . ' <' . $site_mail . '>',
    ),
    'to' => $to,
    'body' => $body,
    'subject' => $subject,
  );

  // Send the mail.
  $mailer->mail($params);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function koba_booking_form_koba_booking_booking_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Switch between add or edit action.
  if ($form['#action'] == '/booking/add') {

    // Fetch module config settings.
    $config = \Drupal::config('koba_booking.settings');

    // Fetch header top file.
    $top_image_id = $config->get('koba_booking.create_booking_top_image');
    $file = ($top_image_id) ? File::load($top_image_id) : FALSE;

    // @todo caching af image.
    // Set variables
    $form['variables']['title'] = $config->get('koba_booking.create_booking_title');
    $form['variables']['top_img'] = ($file) ? $file->url() : '';
    $form['variables']['manchet'] = $config->get('koba_booking.create_booking_description');
    $form['variables']['search_phase'] = $config->get('koba_booking.search_phase');

    // Change field descriptions.
    $form['booking_email']['widget']['0']['value']['#description'] = '<div class="booking--description-link" data-ng-click="showEmailDescription = !showEmailDescription">' . t('Why do we need your email?') . '</div>';
    $form['name']['widget']['0']['value']['#description'] = '<div class="booking--description-link" data-ng-click="showTitleDescription = !showTitleDescription">' . t('Why do we need a title?') . '</div>';
    $form['booking_name']['widget']['0']['value']['#attributes']['readonly'] = 'readonly';
    $form['booking_name']['widget']['0']['value']['#attributes']['class'][] = 'booking--readonly';
    $form['booking_email']['widget']['0']['value']['#attributes']['readonly'] = 'readonly';
    $form['booking_email']['widget']['0']['value']['#attributes']['class'][] = 'booking--readonly';

    // Filter help texts if they have a filter.
    $email_help_text = is_array($config->get('koba_booking.why_email')) ? $config->get('koba_booking.why_email')['value'] : $config->get('koba_booking.why_email');
    $title_help_text = is_array($config->get('koba_booking.why_title')) ? $config->get('koba_booking.why_title')['value'] : $config->get('koba_booking.title');
    $email_help_text_format = is_array($config->get('koba_booking.why_email')) ? $config->get('koba_booking.why_email')['format'] : FALSE;
    $title_help_text_format = is_array($config->get('koba_booking.why_title')) ? $config->get('koba_booking.why_title')['format'] : FALSE;
    $form['variables']['why_email'] = ($email_help_text_format) ? check_markup($email_help_text, $email_help_text_format) : '';
    $form['variables']['why_title'] = ($title_help_text_format) ? check_markup($title_help_text, $title_help_text_format) : '';

    // Help texts are reused as headers.
    $form['variables']['why_email_header'] = t('Why do we need your email?');
    $form['variables']['why_title_header'] = t('Why do we need a title?');

    // Add template as prefix.
    $form['#theme'] = array('booking_add_booking');
  }
}

/**
 * Implements hook_wayf_dk_login_create_user().
 *
 * Store information in session and redirect to logout.
 */
function koba_booking_wayf_dk_login_create_user($attributes) {
  // Get data stored in session.
  $data = \Drupal::service('session')->get('koba_booking_request');

  // The mail attribute changes its status from MUST into MAY as of May 2013 - WAYF.
  if (!empty($attributes['urn:oid:0.9.2342.19200300.100.1.3'])) {
    $data['mail'] = array_pop($attributes['urn:oid:0.9.2342.19200300.100.1.3']);
  }

  // Get name.
  $data['name'] = array(
    'first' => array_pop($attributes['gn']),
    'last' => array_pop($attributes['sn']),
  );

  // Get unique wayf ID.
  $data['uuid'] = array_pop($attributes['urn:oid:1.3.6.1.4.1.5923.1.1.1.10']);

  // Store the data in the session.
  \Drupal::service('session')->set('koba_booking_request', $data);
}
